const express = require('express');
const bcrypt = require('bcryptjs');
const cookieSession = require('cookie-session');
const { getUserByEmail, generateRandomString, urlsForUser } = require('./helpers');
const app = express();
const PORT = 3000;

// Middleware
app.use(express.urlencoded({ extended: false }));
app.use(express.json());
app.use(cookieSession({
  name: 'session',
  keys: ['key1', 'key2'],
  maxAge: 24 * 60 * 60 * 1000 // 24 hours
}));

// Database
const urlDatabase = {
  'b2xVn2': { longURL: 'http://www.lighthouselabs.ca', userID: 'userRandomID' },
  '9sm5xK': { longURL: 'http://www.google.com', userID: 'userRandomID' }
};

const users = {
  'userRandomID': {
    id: 'userRandomID',
    email: 'user@example.com',
    password: bcrypt.hashSync('purple-monkey-dinosaur', 10)
  },
  'user2RandomID': {
    id: 'user2RandomID',
    email: 'user2@example.com',
    password: bcrypt.hashSync('dishwasher-funk', 10)
  }
};

// Routes

// Home Page
app.get('/', (req, res) => {
  const userID = req.session.user_id;
  if (userID) {
    res.redirect('/urls');
  } else {
    res.redirect('/login');
  }
});

// Login Page
app.get('/login', (req, res) => {
  const userID = req.session.user_id;
  if (userID) {
    res.redirect('/urls');
  } else {
    res.render('login');
  }
});

// Login
app.post('/login', (req, res) => {
  const { email, password } = req.body;
  const user = getUserByEmail(email, users);
  if (user && bcrypt.compareSync(password, user.password)) {
    req.session.user_id = user.id;
    res.redirect('/urls');
  } else {
    res.status(403).send('Invalid email or password');
  }
});

// Logout
app.post('/logout', (req, res) => {
  req.session = null;
  res.redirect('/login');
});

// Registration Page
app.get('/register', (req, res) => {
  const userID = req.session.user_id;
  if (userID) {
    res.redirect('/urls');
  } else {
    res.render('register');
  }
});

// Register New User
app.post('/register', (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) {
    res.status(400).send('Email and password cannot be empty');
    return;
  }
  if (getUserByEmail(email, users)) {
    res.status(400).send('Email already exists');
    return;
  }
  const userID = generateRandomString();
  const hashedPassword = bcrypt.hashSync(password, 10);
  users[userID] = { id: userID, email, password: hashedPassword };
  req.session.user_id = userID;
  res.redirect('/urls');
});

// URLs Index Page
app.get('/urls', (req, res) => {
  const userID = req.session.user_id;
  if (!userID) {
    res.status(403).send('You need to login first');
    return;
  }
  const userURLs = urlsForUser(userID, urlDatabase);
  const templateVars = { user: users[userID], urls: userURLs };
  res.render('urls_index', templateVars);
});

// New URL Form Page
app.get('/urls/new', (req, res) => {
  const userID = req.session.user_id;
  if (!userID) {
    res.redirect('/login');
  } else {
    const templateVars = { user: users[userID] };
    res.render('urls_new', templateVars);
  }
});

// Create New URL
app.post('/urls', (req, res) => {
  const userID = req.session.user_id;
  if (!userID) {
    res.status(403).send('You need to login first');
    return;
  }
  const shortURL = generateRandomString();
  const longURL = req.body.longURL;
  urlDatabase[shortURL] = { longURL, userID };
  res.redirect(`/urls/${shortURL}`);
});

// Show URL Page
app.get('/urls/:shortURL', (req, res) => {
  const userID = req.session.user_id;
  const shortURL = req.params.shortURL;
  const url = urlDatabase[shortURL];
  if (!userID) {
    res.status(403).send('You need to login first');
    return;
  }
  if (!url) {
    res.status(404).send('URL not found');
    return;
  }
  if (url.userID !== userID) {
    res.status(403).send('You do not own this URL');
    return;
  }
  const templateVars = { user: users[userID], shortURL, longURL: url.longURL };
  res.render('urls_show', templateVars);
});

// Update URL
app.post('/urls/:shortURL', (req, res) => {
  const userID = req.session.user_id;
  const shortURL = req.params.shortURL;
  const url = urlDatabase[shortURL];
  if (!userID) {
    res.status(403).send('You need to login first');
    return;
  }
  if (!url) {
    res.status(404).send('URL not found');
    return;
  }
  if (url.userID !== userID) {
    res.status(403).send('You do not own this URL');
    return;
  }
  urlDatabase[shortURL].longURL = req.body.longURL;
  res.redirect(`/urls/${shortURL}`);
});

// Delete URL
app.post('/urls/:shortURL/delete', (req, res) => {
  const userID = req.session.user_id;
  const shortURL = req.params.shortURL;
  const url = urlDatabase[shortURL];
  if (!userID) {
    res.status(403).send('You need to login first');
    return;
  }
  if (!url) {
    res.status(404).send('URL not found');
    return;
  }
  if (url.userID !== userID) {
    res.status(403).send('You do not own this URL');
    return;
  }
  delete urlDatabase[shortURL];
  res.redirect('/urls');
});

// Redirect Short URL to Long URL
app.get('/u/:shortURL', (req, res) => {
  const shortURL = req.params.shortURL;
  const longURL = urlDatabase[short
